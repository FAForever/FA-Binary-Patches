#include <stdlib.h>

char ColorsArray[128];
char FakeBool[8];

// Basically what we do here is parsing colors from string in lua function TeamColorMode() (originally it supports only bool)
// then store them in array and then use it instead of one created from GameColors.lua
// the string should contains colors in hex format like that: "(ffffffff,ffffffff,ffffffff,ffffffff,ffffffff)"
// it starts with "(" , ends with ")", colors separated by commas, no spaces, all letters should be lowercase
// then stored colors will be applied to armies according to their indexes.

void TeamColorMode()
{
	__asm__
	(
        "mov dword ptr [esp+0xC], 0x1 \n"
        "push eax \n"
        "push ebx \n"
        "push ecx \n"
        "push edx \n"
        "mov ebx, dword ptr [ecx+0xC] \n"
        "cmp byte ptr [ebx], 0x4 \n"           //4 = string, 1 = bool
        "jne EXIT \n"                          
        "mov ecx, dword ptr [ebx+0x4] \n"
        "cmp byte ptr [ecx+0x14], 0x28 \n"     // string starts with "("
        "jne EXIT \n"
        "add ecx, 0x15 \n"
        
        // Parse hex colors from string and store them to array
        "cmp byte ptr [ecx], 0x29 \n"
        "je EXIT \n"
        "mov eax, 0x1F \n"
        "mov edx, 0x0 \n"
        "mov ebx, %[ColorsArray] \n"
        
        "START: \n"
        "cmp eax, 0xFFFFFFFF \n"
        "jne Parse \n"
        "mov dword ptr [ebx], edx \n"
        "add ebx, 0x4 \n"
        "mov edx, 0x0 \n"
        "mov eax, 0x1F \n"
        
        "Parse: \n"
        "cmp byte ptr [ecx], 0x2C \n"          // ","
        "jne NotComma \n"
        "add ecx, 0x1 \n"
        "NotComma: \n"
        "cmp byte ptr [ecx], 0x29 \n"          // ")"
        "je ExitAferString \n"
        
        "cmp byte ptr [ecx], 0x30 \n"
        "jne L1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L1: \n"
        "cmp byte ptr [ecx], 0x31 \n"
        "jne L2 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L2: \n"
        "cmp byte ptr [ecx], 0x32 \n"
        "jne L3 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L3: \n"
        "cmp byte ptr [ecx], 0x33 \n"
        "jne L4 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L4: \n"
        "cmp byte ptr [ecx], 0x34 \n"
        "jne L5 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L5: \n"
        "cmp byte ptr [ecx], 0x35 \n"
        "jne L6 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L6: \n"
        "cmp byte ptr [ecx], 0x36 \n"
        "jne L7 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L7: \n"
        "cmp byte ptr [ecx], 0x37 \n"
        "jne L8 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L8: \n"
        "cmp byte ptr [ecx], 0x38 \n"
        "jne L9 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "L9: \n"
        "cmp byte ptr [ecx], 0x39 \n"
        "jne LA \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "LA: \n"
        "cmp byte ptr [ecx], 0x61 \n"
        "jne LB \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "LB: \n"
        "cmp byte ptr [ecx], 0x62 \n"
        "jne LC \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "LC: \n"
        "cmp byte ptr [ecx], 0x63 \n"
        "jne LD \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "LD: \n"
        "cmp byte ptr [ecx], 0x64 \n"
        "jne PLE \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "PLE: \n"
        "cmp byte ptr [ecx], 0x65 \n"
        "jne LF \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "btr edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "LF: \n"
        "cmp byte ptr [ecx], 0x66 \n"
        "jne EXIT \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "bts edx, eax \n"
        "sub eax, 0x1 \n"
        "add ecx, 0x1 \n"
        "jmp START \n"
        
        "ExitAferString: \n"
        "pop edx \n"
        "pop ecx \n"
        "pop ebx \n"
        "pop eax \n"
        "lea eax, %[FakeBool] \n"
        "mov dword ptr [ecx+0xc], eax \n"
        "mov eax, 0x1 \n"
        "jmp 0x00847E59 \n"
        
        "EXIT: \n"
        "pop edx \n"
        "pop ecx \n"
        "pop ebx \n"
        "pop eax \n"
        "jmp 0x00847E59 \n"
        :
        : [ColorsArray] "i" (ColorsArray), [FakeBool] "m" (FakeBool)
        :
	);
}


void TeamColorModeRenderer()
{
    const char* colors = ColorsArray;
	__asm__
	(
        "push eax \n"
        "mov ecx, dword ptr [edx] \n"
        "mov eax, %[colors] \n"
        "mov ecx, dword ptr [eax+ecx*0x4] \n"
        "pop eax \n"
        "jmp 0x0085DB77 \n"
        :
        : [colors] "i" (colors)
        :
	);
}