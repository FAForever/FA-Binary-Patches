//HOOK Beat ROffset = 0x4BC100

#include <stdlib.h>
#include "../preprocessor/define.h"
#include "../preprocessor/macro.h"

__asm__
(
    ".equ by_pass_address, 0x008BC100 \n"
);

__asm__
(
	" \n " //!; Source: forgedalliance_exxt.exe (base 0x00400000 - 4194304)
	" \n " //!; Internal calls outside selected range (before)
	"_0x415560 =  4281696 - by_pass_address\n " 
	"_0x822B80 =  8530816 - by_pass_address\n " 
	"_0x90C590 =  9487760 - by_pass_address\n " 
	"_0x90C1D0 =  9486800 - by_pass_address\n " 
	"_0x908A70 =  9472624 - by_pass_address\n " 
	"_0x907310 =  9466640 - by_pass_address\n " 
	"_0x907F50 =  9469776 - by_pass_address\n " 
	"_0x9091E0 =  9474528 - by_pass_address\n " 
	"_0x9075D0 =  9467344 - by_pass_address\n "	
	" \n " //!; Start of selected range: 0x008BC100
	"cmp dword ptr [0x011FD23F], 0x1 \n" //BLOCK BASED ON THE VARIABLE
	"jne run_input_check \n"
	"xor eax, eax \n"
	"ret \n"
	"run_input_check: \n"	
	"push ebp \n " 
	"mov ebp,esp \n " 
	"and esp,0xFFFFFFF8 \n " 
	//"mov eax,dword ptr [0x0] \n " 
	"push 0xFFFFFFFF \n " 
	"push 0xB8B0A0 \n " 
	"push eax \n " 
	//"mov dword ptr [0x0],esp \n " 
	"sub esp,0x50 \n " 
	"push ebx \n " 
	"push esi \n " 
	"mov esi,dword ptr [0x10C5A74] \n " 
	"push edi \n " 
	"mov edi,ecx \n " 
	"mov eax,dword ptr [edi] \n " 
	"push eax \n " 
	"call _0x90C590 \n " 
	"add esp,0x4 \n " 
	"cmp eax,0x2 \n " 
	"je L0xABEL_0x008BC14B  \n " //!; => 0x008BC14B
	"push eax \n " 
	"push 0x2 \n " 
	"push esi \n " 
	"push 0xE0A220 \n " 
	"push edi \n " 
	"call _0x90C1D0 \n " 
	"add esp,0x14 \n " 
	"L0xABEL_0x008BC14B: \n " 
	"lea ecx,dword ptr [esp+0x28] \n " 
	"push ecx \n " 
	"mov ebx,0x1 \n " 
	"lea ecx,dword ptr [esp+0x34] \n " 
	"mov dword ptr [esp+0x2C],edi \n " 
	"mov dword ptr [esp+0x30],ebx \n " 
	"call _0x908A70 \n " 
	"mov dword ptr [esp+0x64],0x0 \n " 
	"lea esi,dword ptr [esp+0x20] \n " 
	"mov dword ptr [esp+0x20],edi \n " 
	"mov dword ptr [esp+0x24],0x2 \n " 
	"call _0x415560 \n " 
	"lea ecx,dword ptr [esp+0x30] \n " 
	"mov byte ptr [esp+0x13],al \n " 
	"call _0x907310 \n " 
	"test al,al \n " 
	"je L0xABEL_0x008BC256  \n " //!; => 0x008BC256
	"lea ecx,dword ptr [esp+0x30] \n " 
	"call _0x907F50 \n " 
	"cmp eax,ebx \n " 
	"mov dword ptr [esp+0x14],eax \n " 
	"jl L0xABEL_0x008BC256  \n " //!; => 0x008BC256
	"lea ecx,dword ptr [ecx] \n " 
	"L0xABEL_0x008BC1B0: \n " 
	"push ebx \n " 
	"lea edx,dword ptr [esp+0x48] \n " 
	"push edx \n " 
	"lea ecx,dword ptr [esp+0x38] \n " 
	"call _0x9091E0 \n " 
	"mov byte ptr [esp+0x64],0x1 \n " 
	"call _0x822B80 \n " 
	"lea ecx,dword ptr [esp+0x44] \n " 
	"mov esi,eax \n " 
	"mov byte ptr [esp+0x64],0x0 \n " 
	"call _0x9075D0 \n " 
	"test esi,esi \n " 
	"je L0xABEL_0x008BC249  \n " //!; => 0x008BC249
	"mov eax,dword ptr [esi+0x148] \n " 
	"mov edx,dword ptr [eax+0x28] \n " 
	"lea ecx,dword ptr [esi+0x148] \n " 
	"call edx \n " 
	"test al,al \n " 
	"jne L0xABEL_0x008BC249  \n " //!; => 0x008BC249
	"cmp byte ptr [esp+0x13],0x0 \n " 
	"mov ecx,dword ptr [0x10C4F50] \n " 
	"push ecx \n " 
	"mov dword ptr [esp+0x1C],esp \n " 
	"mov eax,esp \n " 
	"push ecx \n " 
	"mov dword ptr [esp+0x20],esp \n " 
	"je L0xABEL_0x008BC22B  \n " //!; => 0x008BC22B
	"mov dword ptr [eax],0xE0120C \n " 
	"mov eax,esp \n " 
	"mov dword ptr [eax],0xE2B32C \n " 
	"mov esi,dword ptr [esi+0x44] \n " 
	"mov eax,dword ptr [ecx] \n " 
	"mov eax,dword ptr [eax+0x60] \n " 
	"push esi \n " 
	"lea edx,dword ptr [esp+0x28] \n " 
	"push edx \n " 
	"call eax \n " 
	"jmp L0xABEL_0x008BC249  \n " //!; => 0x008BC249
	"L0xABEL_0x008BC22B: \n " 
	"mov dword ptr [eax],0xE01204 \n " 
	"mov eax,esp \n " 
	"mov dword ptr [eax],0xE2B32C \n " 
	"mov esi,dword ptr [esi+0x44] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov edx,dword ptr [edx+0x60] \n " 
	"push esi \n " 
	"lea eax,dword ptr [esp+0x2C] \n " 
	"push eax \n " 
	"call edx \n " 
	"L0xABEL_0x008BC249: \n " 
	"add ebx,0x1 \n " 
	"cmp ebx,dword ptr [esp+0x14] \n " 
	"jle L0xABEL_0x008BC1B0  \n " //!; => 0x008BC1B0
	"L0xABEL_0x008BC256: \n " 
	"lea ecx,dword ptr [esp+0x30] \n " 
	"mov dword ptr [esp+0x64],0xFFFFFFFF \n " 
	"call _0x9075D0 \n " 
	"mov ecx,dword ptr [esp+0x5C] \n " 
	"pop edi \n " 
	"pop esi \n " 
	"xor eax,eax \n " 
	//"mov dword ptr [0x0],ecx \n " 
	"pop ebx \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret  \n " 
	" \n " //! 0xFinis of selected range: 0x008BC27A
	" \n " //!; Internal calls outside selected range (after)
	".align 8192, 0x0 \n"	
);