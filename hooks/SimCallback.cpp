//HOOK Beat ROffset = 0x4BA770

#include <stdlib.h>
#include "../preprocessor/define.h"
#include "../preprocessor/macro.h"

__asm__
(
    ".equ by_pass_address, 0x008BA770 \n"
);

__asm__
(
	" \n " //!; Source: forgedalliance_exxt.exe (base 0x00400000 - 4194304)
	" \n " //!; Internal calls outside selected range (before)
	"_0x4154B0 =  4281520 - by_pass_address\n " 
	"_0x4059E0 =  4217312 - by_pass_address\n "  
	"_0x415560 =  4281696 - by_pass_address\n " 
	"_0x66A330 =  6726448 - by_pass_address\n " 
	"_0x4036A0 =  4208288 - by_pass_address\n " 
	"_0x66ADD0 =  6729168 - by_pass_address\n " 
	"_0x90C590 =  9487760 - by_pass_address\n " 
	"_0x90C1D0 =  9486800 - by_pass_address\n " 
	"_0x90C5A0 =  9487776 - by_pass_address\n " 
	"_0x90CDF0 =  9489904 - by_pass_address\n " 
	"_0x90D000 =  9490432 - by_pass_address\n " 
	"_0x90CA90 =  9489040 - by_pass_address\n " 
	"_0x908A70 =  9472624 - by_pass_address\n " 
	"_0x9075D0 =  9467344 - by_pass_address\n " 
	"_0xA82542 = 0xA82542 - by_pass_address\n "
	"_0x957A60 = 0x957A60 - by_pass_address\n "
	" \n " //!; Start of selected range: 0x008BA770
	"cmp dword ptr [0x011FD23F], 0x1 \n" //BLOCK BASED ON THE VARIABLE
	"jne run_input_check \n"
	"xor eax, eax \n"
	"ret \n"
	"run_input_check: \n"
	"push ebp \n " 
	"mov ebp,esp \n " 
	"and esp,0xFFFFFFF8 \n " 
	//"mov eax,dword ptr [0x0] \n " 
	"push 0xFFFFFFFF \n " 
	"push 0xBA28C8 \n " 
	"push eax \n " 
	//"mov dword ptr [0x0],esp \n " 
	"sub esp,0x88 \n " 
	"push ebx \n " 
	"push esi \n " 
	"mov esi,ecx \n " 
	"mov eax,dword ptr [esi] \n " 
	"push edi \n " 
	"mov edi,dword ptr [0x10C5954] \n " 
	"push eax \n " 
	"call _0x90C590 \n " 
	"add esp,0x4 \n " 
	"cmp eax,0x1 \n " 
	"jl L0xABEL_0x008BA7B1  \n " //!; => 0x008BA7B1
	"cmp eax,0x2 \n " 
	"jle L0xABEL_0x008BA7C5  \n " //!; => 0x008BA7C5
	"L0xABEL_0x008BA7B1: \n " 
	"push eax \n " 
	"push 0x2 \n " 
	"push 0x1 \n " 
	"push edi \n " 
	"push 0xE0A270 \n " 
	"push esi \n " 
	"call _0x90C1D0 \n " 
	"add esp,0x18 \n " 
	"L0xABEL_0x008BA7C5: \n " 
	"mov ecx,dword ptr [esi] \n " 
	"push 0x2 \n " 
	"push ecx \n " 
	"call _0x90C5A0 \n " 
	"mov edx,dword ptr [esi] \n " 
	"push 0xE4C7A4 \n " 
	"push edx \n " 
	"call _0x90CDF0 \n " 
	"mov eax,dword ptr [esi] \n " 
	"push 0x1 \n " 
	"push eax \n " 
	"call _0x90D000 \n " 
	"mov ecx,dword ptr [esi] \n " 
	"push ecx \n " 
	"call _0x90C590 \n " 
	"add esp,0x1C \n " 
	"mov dword ptr [esp+0x1C],esi \n " 
	"mov dword ptr [esp+0x20],eax \n " 
	"mov edx,dword ptr [esi] \n " 
	"push eax \n " 
	"push edx \n " 
	"call _0x90CA90 \n " 
	"mov edi,eax \n " 
	"xor ebx,ebx \n " 
	"add esp,0x8 \n " 
	"cmp edi,ebx \n " 
	"jne L0xABEL_0x008BA81B  \n " //!; => 0x008BA81B
	"push 0xE00AD0 \n " 
	"lea ecx,dword ptr [esp+0x20] \n " 
	"call _0x4154B0 \n " 
	"L0xABEL_0x008BA81B: \n " 
	"mov eax,edi \n " 
	"mov dword ptr [esp+0x64],0xF \n " 
	"mov dword ptr [esp+0x60],ebx \n " 
	"mov byte ptr [esp+0x50],bl \n " 
	"lea edx,dword ptr [eax+0x1] \n " 
	"L0xABEL_0x008BA830: \n " 
	"mov cl,byte ptr [eax] \n " 
	"add eax,0x1 \n " 
	"test cl,cl \n " 
	"jne L0xABEL_0x008BA830  \n " //!; => 0x008BA830
	"sub eax,edx \n " 
	"push eax \n " 
	"push edi \n " 
	"lea ecx,dword ptr [esp+0x54] \n " 
	"call _0x4059E0 \n " 
	"mov dword ptr [esp+0x9C],ebx \n " 
	"mov eax,dword ptr [esi] \n " 
	"push 0xE4C7AC \n " 
	"push eax \n " 
	"call _0x90CDF0 \n " 
	"mov ecx,dword ptr [esi] \n " 
	"push 0x1 \n " 
	"push ecx \n " 
	"call _0x90D000 \n " 
	"mov edx,dword ptr [esi] \n " 
	"push edx \n " 
	"call _0x90C590 \n " 
	"mov dword ptr [esp+0x2C],eax \n " 
	"add esp,0x14 \n " 
	"lea eax,dword ptr [esp+0x14] \n " 
	"push eax \n " 
	"lea ecx,dword ptr [esp+0x3C] \n " 
	"mov dword ptr [esp+0x18],esi \n " 
	"call _0x908A70 \n " 
	"lea ecx,dword ptr [esp+0x88] \n " 
	"mov edx,ecx \n " 
	"lea eax,dword ptr [esp+0x90] \n " 
	"mov dword ptr [esp+0x24],esi \n " 
	"mov dword ptr [esp+0x28],0x2 \n " 
	"mov dword ptr [esp+0x70],ebx \n " 
	"mov dword ptr [esp+0x78],ecx \n " 
	"mov dword ptr [esp+0x7C],edx \n " 
	"mov dword ptr [esp+0x80],eax \n " 
	"mov dword ptr [esp+0x84],ecx \n " 
	"lea esi,dword ptr [esp+0x24] \n " 
	"mov byte ptr [esp+0x9C],0x2 \n " 
	"call _0x415560 \n " 
	"test al,al \n " 
	"je L0xABEL_0x008BA945  \n " //!; => 0x008BA945
	"mov ebx,dword ptr [0x10A6470] \n " 
	"mov eax,dword ptr [ebx+0x4A4] \n " 
	"mov eax,dword ptr [eax] \n " 
	"add ebx,0x4A0 \n " 
	"push eax \n " 
	"lea edi,dword ptr [esp+0x14] \n " 
	"mov esi,ebx \n " 
	"call _0x66A330 \n " 
	"mov eax,dword ptr [eax] \n " 
	"cmp eax,dword ptr [ebx+0x4] \n " 
	"mov dword ptr [esp+0x14],ebx \n " 
	"mov dword ptr [esp+0x18],eax \n " 
	"je L0xABEL_0x008BA945  \n " //!; => 0x008BA945
	"nop  \n " 
	"L0xABEL_0x008BA900: \n " 
	"mov eax,dword ptr [eax+0x10] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x008BA90C  \n " //!; => 0x008BA90C
	"add eax,0xFFFFFFF8 \n " 
	"jmp L0xABEL_0x008BA90E  \n " //!; => 0x008BA90E
	"L0xABEL_0x008BA90C: \n " 
	"xor eax,eax \n " 
	"L0xABEL_0x008BA90E: \n " 
	"mov esi,dword ptr [eax+0x44] \n " 
	"lea edx,dword ptr [esp+0x2C] \n " 
	"push edx \n " 
	"lea edi,dword ptr [esp+0x74] \n " 
	"call _0x4036A0 \n " 
	"lea edx,dword ptr [esp+0x18] \n " 
	"call _0x66ADD0 \n " 
	"mov eax,dword ptr [esp+0x18] \n " 
	"mov esi,dword ptr [esp+0x14] \n " 
	"push eax \n " 
	"lea edi,dword ptr [esp+0x14] \n " 
	"call _0x66A330 \n " 
	"mov eax,dword ptr [eax] \n " 
	"cmp eax,dword ptr [ebx+0x4] \n " 
	"mov dword ptr [esp+0x18],eax \n " 
	"jne L0xABEL_0x008BA900  \n " //!; => 0x008BA900
	"L0xABEL_0x008BA945: \n " 
	"mov ecx,dword ptr [0x10C4F50] \n " 
	"lea edx,dword ptr [esp+0x68] \n " 
	"push edx \n " 
	"lea eax,dword ptr [esp+0x3C] \n " 
	"push eax \n " 
	"mov eax,dword ptr [esp+0x58] \n " 
	"push ecx \n " 
	"mov esi,0x10 \n " 
	"cmp dword ptr [esp+0x70],esi \n " 
	"mov dword ptr [esp+0x1C],esp \n " 
	"mov edx,esp \n " 
	"jae L0xABEL_0x008BA96F  \n " //!; => 0x008BA96F
	"lea eax,dword ptr [esp+0x5C] \n " 
	"L0xABEL_0x008BA96F: \n " 
	"mov dword ptr [edx],eax \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov edx,dword ptr [edx+0x88] \n " 
	"lea eax,dword ptr [esp+0x1C] \n " 
	"push eax \n " 
	"call edx \n " 
	"mov eax,dword ptr [esp+0x78] \n " 
	"cmp eax,dword ptr [esp+0x84] \n " 
	"je L0xABEL_0x008BA9AA  \n " //!; => 0x008BA9AA
	"push eax \n " 
	"call _0xA82542 \n " 
	"mov eax,dword ptr [esp+0x88] \n " 
	"mov dword ptr [esp+0x7C],eax \n " 
	"mov ecx,dword ptr [eax] \n " 
	"add esp,0x4 \n " 
	"mov dword ptr [esp+0x80],ecx \n " 
	"L0xABEL_0x008BA9AA: \n " 
	"lea ecx,dword ptr [esp+0x38] \n " 
	"mov dword ptr [esp+0x7C],eax \n " 
	"mov byte ptr [esp+0x9C],0x0 \n " 
	"call _0x9075D0 \n " 
	"cmp dword ptr [esp+0x64],esi \n " 
	"jb L0xABEL_0x008BA9D2  \n " //!; => 0x008BA9D2
	"mov edx,dword ptr [esp+0x50] \n " 
	"push edx \n " 
	"call _0x957A60 \n " 
	"add esp,0x4 \n " 
	"L0xABEL_0x008BA9D2: \n " 
	"mov ecx,dword ptr [esp+0x94] \n " 
	"pop edi \n " 
	"pop esi \n " 
	"xor eax,eax \n " 
	//"mov dword ptr [0x0],ecx \n " 
	"pop ebx \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret  \n " 
	" \n " //! 0xFinis of selected range: 0x008BA9E8
	" \n " //!; Internal calls outside selected range (after)
	".align 8192, 0x0 \n"
);